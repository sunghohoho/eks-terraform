existingObjstoreSecret: ${s3_object_secret}

query:
  enabeld: true
  dnsDiscovery:
    enabled: false
  stores:       # prometheus 검색을 위한 prometheus가 연결되어 있는 파드 검색, 사이드카의 경우 port가 grpc 10901, http 10902로 설정, 해당 10901 svc가 연결되어 있는 operated, thanis discovery 둘 다 사용가능
    # - dnssrv+_grpc._tcp.prometheus-kube-prometheus-thanos-discovery.monitoring.svc:10901
    - dnssrv+_grpc._tcp.prometheus-operated.monitoring.svc:10901

queryFrontend:
  enabled: true
  ingress:
    enabled: true
    hostname: ${thanos_url}
    ingressClassName: nginx
    annotations:
        ingress.annotations.nginx.ingress.kubernetes.io/proxy-buffer-size: 128k

bucketweb:
  enabled: true
  serviceAccount:       # bucket access를 위한 service account 구성
    create: true
    name: "thanos-bucketweb"
    annotations:
        eks.amazonaws.com/role-arn: ${thanos_role}
  ingress:
    enabled: true
    hostname: ${bucket_url}
    ingressClassName: nginx
    annotations:
        ingress.annotations.nginx.ingress.kubernetes.io/proxy-buffer-size: 128k

compactor:
  enabled: true
  serviceAccount:       # bucket access를 위한 service account 구성
    create: true
    name: "thanos-compactor"
    annotations:
        eks.amazonaws.com/role-arn: ${thanos_role}

storegateway:
  serviceAccount:       # bucket access를 위한 service account 구성
    create: true
    name: "thanos-storegateway"
    annotations:
        eks.amazonaws.com/role-arn: ${thanos_role}
  enabled: true

ruler:
  enabled: true
  alertmanagers:
    - ${alert_url}
  config: |-
    groups:
      - name: "metamonitoring"
        rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="monitoring/kube-prometheus"})

# metrics:
#   enabled: true
#   serviceMonitor:
#     enabled: true