alertmanager:
  alertmanagerSpec:
    replicas: 2       # 1인 경우에는 alertmanager의 cluster stauts가 disable로 사용불가, replica를 추가해줘야 정상적으로 등록가능
  enabled: true
  config:
    route:
      routes: null
      receiver: 'slack'
      group_by: [namespace]
    receivers:
    - name: 'slack'
      slack_configs:
      - api_url: ${slack_api}
        channel: ${slack_channel}
        color: '{{ template "slack.color" . }}'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true
        actions:
        - type: button
          text: 'Runbook :green_book:'
          url: '{{ (index .Alerts 0).Annotations.runbook_url }}'
        - type: button
          text: 'Query :mag:'
          url: '{{ (index .Alerts 0).GeneratorURL }}'
        - type: button
          text: 'Dashboard :chart_with_upwards_trend:'
          url: '{{ (index .Alerts 0).Annotations.dashboard_url }}'
        - type: button
          text: 'Silence :no_bell:'
          url: '{{ template "__alert_silence_link" . }}'
  templateFiles:
    slack.tmpl: |-
      {{/* Alertmanager Silence link */}}
      {{ define "__alert_silence_link" -}}
          {{ .ExternalURL }}/#/silences/new?filter=%7B
          {{- range .CommonLabels.SortedPairs -}}
              {{- if ne .Name "alertname" -}}
                  {{- .Name }}%3D"{{- .Value -}}"%2C%20
              {{- end -}}
          {{- end -}}
          alertname%3D"{{- .CommonLabels.alertname -}}"%7D
      {{- end }}
      
      {{/* Cluster Name */}}
      {{ define "__cluster_name" -}}
          *Cluster:* `{{ .CommonLabels.cluster }}`
      {{- end }}
      
      {{/* Severity of the alert */}}
      {{ define "__alert_severity" -}}
          {{- if eq .CommonLabels.severity "critical" -}}
          *Severity:* `Critical`
          {{- else if eq .CommonLabels.severity "warning" -}}
          *Severity:* `Warning`
          {{- else if eq .CommonLabels.severity "info" -}}
          *Severity:* `Info`
          {{- else -}}
          *Severity:* :question: {{ .CommonLabels.severity }}
          {{- end }}
      {{- end }}
      
      {{/* Title of the Slack alert */}}
      {{ define "slack.title" -}}
        [{{ .Status | toUpper -}}
        {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
        ] {{ .CommonLabels.alertname }}
      {{- end }}
      
      
      {{/* Color of Slack attachment (appears as line next to alert )*/}}
      {{ define "slack.color" -}}
          {{ if eq .Status "firing" -}}
              {{ if eq .CommonLabels.severity "warning" -}}
                  warning
              {{- else if eq .CommonLabels.severity "critical" -}}
                  danger
              {{- else -}}
                  #439FE0
              {{- end -}}
          {{ else -}}
          good
          {{- end }}
      {{- end }}
      
      {{/* The text to display in the alert */}}
      {{ define "slack.text" -}}
      
          {{ template "__cluster_name" . }}
          {{- "\n" -}}
          {{ template "__alert_severity" . }}
          {{- if (index .Alerts 0).Annotations.summary }}
          {{- "\n" -}}
          *Summary:* {{ (index .Alerts 0).Annotations.summary }}
          {{- end }}
      
          {{ range .Alerts }}
      
              {{- if .Annotations.description }}
              {{- "\n" -}}
              {{ .Annotations.description }}
              {{- "\n" -}}
              {{- end }}
              {{- if .Annotations.message }}
              {{- "\n" -}}
              {{ .Annotations.message }}
              {{- "\n" -}}
              {{- end }}
      
          {{- end }}
      
      {{- end }}
  ingress: 
    enabled: true
    ingressClassName: nginx
    annotations:
        ingress.annotations.nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    hosts:
      - ${alert_url}
    paths:
      - /

prometheus:
  serviceAccount:       # bucket access를 위한 service account 구성
    create: true
    name: "kube-prometheus-prometheus"
    annotations:
        eks.amazonaws.com/role-arn: ${thanos_role}
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false    # prom은 다른 네임스페이스의 servicemonitor는 검색안함, false를 해야 검색가능
    serviceMonitorSelectorNilUsesHelmValues: false
    thanos:
      create: true       # 타노스 사이드카 설정
      objectStorageConfig:       # 타노스 오브젝트 설정
        existingSecret:       # 타노스 오브젝트 시크릿 가져오기, 없으면 s3로 적재안됨, https://www.reddit.com/r/kubernetes/comments/1ajqez9/thanos_not_uploading_anything_to_object_storage/
          key: "objstore.yml"
          name: ${s3_object_secret}
  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true
  ingress: 
    enabled: true
    ingressClassName: nginx
    annotations:
        ingress.annotations.nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    hosts:
      - ${prom_url}
    paths:
      - /

# https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  adminPassword: ${grafana_admin_password}
  defaultDashboardsTimezone: Asia/Seoul   # default 타임존 설정
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
        ingress.annotations.nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    hosts: 
      - ${grafana_url}
    paths: 
      - /*

kubelet:
  enabled: true
  serviceMonitor:
    cAdvisor: true
kubeControllerManager:
  enabled: false
coreDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
kubeStateMetrics:
  enabled: true
nodeExporter:
  enabled: true
  operatingSystems:
    darwin:
      enabled: false
    aix:
      enabled: false
kubeApiServer:
  enabled: false

defaultRules:
  create: true
  rules:
    alertmanager: false
    etcd: false
    configReloaders: false
    general: false
    k8s: true
    kubeApiserverAvailability: false
    kubeApiserverBurnrate: false
    kubeApiserverHistogram: false
    kubeApiserverSlos: false
    kubeControllerManager: false
    kubelet: false
    kubeProxy: false
    kubePrometheusGeneral: false
    kubePrometheusNodeRecording: false
    kubernetesApps: true
    kubernetesResources: false
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: false
    node: true
    nodeExporterAlerting: false
    nodeExporterRecording: false
    prometheus: false
    prometheusOperator: false
 