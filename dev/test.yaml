cat > templates/deployment.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      terminationGracePeriodSeconds: 0
      containers:
      - name: web-container
        image: 866477832211.dkr.ecr.ap-northeast-2.amazonaws.com/abc-cats:20241107.072310
        resources:
          requests:
            cpu: 250m
EOF

---
cat > templates/service.yaml <<EOF
apiVersion: v1
kind: Service
metadata:
  name: cats-svc
spec:
  type: NodePort
  selector:
    app: web
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30007
EOF

---
# argocd 애플리케이션 생성,
cat <<EOF | kubectl apply -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nginx
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/sunghohoho/cats-and-dogs-helm
    targetRevision: HEAD
    path: frontend
    helm:
      valueFiles: 
      - values.yaml
  destination:
    name: in-cluster
    namespace: default
  syncPolicy:
    automated:
      prune: true
EOF
---

cat <<EOF | kubectl apply -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: apache
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/sunghohoho/cats-and-dogs-helm
    targetRevision: HEAD
    path: frontend
    helm:
      valueFiles: 
      - httpd_dev.yaml
  destination:
    name: in-cluster
    namespace: default
  syncPolicy:
    automated:
      prune: true
EOF
---
# argocd 애플리케이션 생성
c
---
# 헬름 ecr로 package된 helm chart 업로드
helm push cad-1.0.0.tgz \
oci://866477832211.dkr.ecr.ap-northeast-2.amazonaws.com/helm-charts/

---
# ecr 로그인
aws ecr get-login-password --region ap-northeast-2 | 
helm registry login \
--username AWS \
--password-stdin 866477832211.dkr.ecr.ap-northeast-2.amazonaws.com

---
# argocd ecr 인증을 위한 secrets 생성
cat <<EOF | kubectl delete -f -
apiVersion: v1
kind: Secret
metadata:
  name: ecr-helm
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
stringData:
  type: helm
  url: 866477832211.dkr.ecr.ap-northeast-2.amazonaws.com
  name: ecr-helm
  username: AWS
  password: $(aws ecr get-login-password --region ap-northeast-2)
EOF
---

cat <<EOF | kubectl apply -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: my-cad
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  sources:
  - repoURL: 866477832211.dkr.ecr.ap-northeast-2.amazonaws.com
    chart: helm-charts/cad
    targetRevision: 1.0.0
    helm:
      valueFiles: 
      - \$values/values.yaml
  - repoURL: https://github.com/sunghohoho/cats-and-dogs-helm
    targetRevision: HEAD
    ref: values
  destination:
    name: in-cluster
    namespace: default
  syncPolicy:
    automated:
      prune: true
EOF

--
cat <<EOF | kubectl delete -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cad
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/sunghohoho/cats-and-dogs-helm
    targetRevision: HEAD
    path: .
    helm:
      valueFiles: 
      - values.yaml
  destination:
    name: in-cluster
    namespace: default
  syncPolicy:
    automated:
      prune: true
EOF

---

argocd app create cad \
--project default \
--repo https://github.com/sunghohoho/cats-and-dogs-helm \
--path . \
--dest-namespace default \
--dest-server https://kubernetes.default.svc \
--revision HEAD \
--values values.yaml \
--sync-policy automated \
--self-heal \
--auto-prune


つO υ Oつ
ʅʕ•ᴥ•ʔʃ

---
cat <<EOF | kubectl apply -f -
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata: 
  name: sample-project
  namespace: argocd
spec:
  clusterResourceWhitelist:
  - group: "*"
    kind: "*"
  destinations:
  - namespace: default
    server: https://kubernetes.default.svc
  orphanedResources:
    warn: false
  sourceRepos:
  - '*'
EOF

---

argocd repo add https://github.com/sunghohoho/cad-helm-values \
--username sunghohoho --password ghp --insecure-skip-server-verification

  # Add a private Helm repository named 'stable' via HTTPS
  argocd repo add https://charts.helm.sh/stable --type helm --name stable --username test --password test

  # Add a private Helm OCI-based repository named 'stable' via HTTPS
  argocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test